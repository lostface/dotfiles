// Place your settings in this file to overwrite the default settings
{
  // Columns at which to show vertical rulers
  "editor.rulers": [
    80,
    120,
    160
  ],

  // Controls the font family.
  "editor.fontFamily": "Fira Code",

  // Enables font ligatures
  "editor.fontLigatures": true,

  // Controls the font size in pixels.
  "editor.fontSize": 14,
  
  // The number of spaces a tab is equal to. This setting is overridden based on the file contents when `editor.detectIndentation` is on.
  "editor.tabSize": 2,

  // Controls if suggestions should automatically show up while typing
  "editor.quickSuggestions": {
    "other": true,
    "comments": true,
    "strings": true
  },

  // Controls if the editor should allow to move selections via drag and drop.
  "editor.dragAndDrop": false,

  // Controls if the editor will scroll using an animation
  "editor.smoothScrolling": true,


  // Controls auto save of dirty files. Accepted values:  'off', 'afterDelay', 'onFocusChange' (editor loses focus), 'onWindowChange' (window loses focus). If set to 'afterDelay', you can configure the delay in 'files.autoSaveDelay'.
  "files.autoSave": "afterDelay",

  // Controls the delay in ms after which a dirty file is saved automatically. Only applies when 'files.autoSave' is set to 'afterDelay'
  "files.autoSaveDelay": 1000,

  // When enabled, will trim trailing whitespace when saving a file.
  "files.trimTrailingWhitespace": false,

  // When enabled, insert a final new line at the end of the file when saving it.
  "files.insertFinalNewline": true,

  // When enabled, will trim all new lines after the final new line at the end of the file when saving it.
  "files.trimFinalNewlines": true,

  // When enabled, will attempt to guess the character set encoding when opening files. This setting can be configured per language too.
  "files.autoGuessEncoding": true,


  // Searches case-insensitively if the pattern is all lowercase, otherwise, searches case-sensitively
  "search.smartCase": true,


  // End with a newline.
  "html.format.endWithNewline": true,
    
  // Configures if the built-in HTML language support suggests Angular V1 tags and properties.
  "html.suggest.angular1": false,

  // Configures if the built-in HTML language support suggests Ionic tags, properties and values.
  "html.suggest.ionic": false,    


  // Enable/disable semantic checking of JavaScript files. Existing jsconfig.json or tsconfig.json files override this setting. Requires TypeScript >=2.3.1.
  "javascript.implicitProjectConfig.checkJs": true,


  // Controls whether auto detection of Jake tasks is on or off. Default is on.
  "jake.autoDetect": "off",

  // Controls whether auto detection of Grunt tasks is on or off. Default is on.
  "grunt.autoDetect": "off",
  
  
  "telemetry.enableCrashReporter": false,
  "telemetry.enableTelemetry": false,


  // When set, text selected in the terminal will be copied to the clipboard.
  "terminal.integrated.copyOnSelection": true,

  // Controls whether the terminal cursor blinks.
  "terminal.integrated.cursorBlinking": true,

  
  // Controls the dimensions of opening a new window when at least one window is already opened. By default, a new window will open in the center of the screen with small dimensions. When set to 'inherit', the window will get the same dimensions as the last window that was active. When set to 'maximized', the window will open maximized and fullscreen if configured to 'fullscreen'. Note that this setting does not have an impact on the first window that is opened. The first window will always restore the size and location as you left it before closing.
  "window.newWindowDimensions": "inherit",


  "workbench.colorTheme": "Ayu Mirage",

  // Controls if opened editors should show in tabs or not.
  "workbench.editor.showTabs": false,

  // Controls if editors showing a file should close automatically when the file is deleted or renamed by some other process. Disabling this will keep the editor open as dirty on such an event. Note that deleting from within the application will always close the editor and that dirty files will never close to preserve your data.
  "workbench.editor.closeOnFileDelete": false,

  // Controls which editor is shown at startup, if none is restored from the previous session. Select 'none' to start without an editor, 'welcomePage' to open the Welcome page (default), 'newUntitledFile' to open a new untitled file (only opening an empty workspace).
  "workbench.startupEditor": "none",


  // Ignore whitespace changes when blaming (-w flag)
  "gitblame.ignoreWhitespace": true,

  "sync.gist": "4c333bfdf374e853c8f610e8d9634c19",
  "sync.lastUpload": "2018-02-12T13:08:42.596Z",
  "sync.autoDownload": false,
  "sync.autoUpload": false,
  "sync.lastDownload": "",
  "sync.forceDownload": false,
  "sync.anonymousGist": false,
  "sync.host": "",
  "sync.pathPrefix": "",
  "sync.quietSync": false,
  "sync.askGistName": false,
  "diffEditor.ignoreTrimWhitespace": true,


/*
  // Controls if opened editors from Quick Open show as preview. Preview editors are reused until they are kept (e.g. via double click or editing).
  "workbench.editor.enablePreviewFromQuickOpen": false,

  // Controls if an editor is revealed in any of the visible groups if opened. If disabled, an editor will prefer to open in the currently active editor group. If enabled, an already opened editor will be revealed instead of opened again in the currently active editor group. Note that there are some cases where this setting is ignored, e.g. when forcing an editor to open in a specific group or to the side of the currently active group.
  "workbench.editor.revealIfOpen": true,

  // Controls if Quick Open should close automatically once it loses focus.
  "workbench.quickOpen.closeOnFocusLost": false,

  // Controls if editors showing a file should close automatically when the file is deleted or renamed by some other process. Disabling this will keep the editor open as dirty on such an event. Note that deleting from within the application will always close the editor and that dirty files will never close to preserve your data.
  "workbench.editor.closeOnFileDelete": false,

  // Controls the format of the label for an editor. Changing this setting can for example make it easier to understand the location of a file:
  // - short:   'parent'
  // - medium:  'workspace/src/parent'
  // - long:    '/home/user/workspace/src/parent'
  // - default: '.../parent', when another tab shares the same title, or the relative workspace path if tabs are disabled
  "workbench.editor.labelFormat": "short",


  // Controls the window title based on the active editor. Variables are substituted based on the context:
  // ${activeEditorShort}: e.g. myFile.txt
  // ${activeEditorMedium}: e.g. myFolder/myFile.txt
  // ${activeEditorLong}: e.g. /Users/Development/myProject/myFolder/myFile.txt
  // ${folderName}: e.g. myFolder
  // ${folderPath}: e.g. /Users/Development/myFolder
  // ${rootName}: e.g. myFolder1, myFolder2, myFolder3
  // ${rootPath}: e.g. /Users/Development/myWorkspace
  // ${appName}: e.g. VS Code
  // ${dirty}: a dirty indicator if the active editor is dirty
  // ${separator}: a conditional separator (" - ") that only shows when surrounded by variables with values
  "window.title": "${dirty}${activeEditorMedium}${separator}${folderName}${separator}${appName}",
  */
}
