// Place your settings in this file to overwrite the default settings
{
  // "typescript.tsdk": "C:/Users/midnite/AppData/Roaming/npm/node_modules/typescript/lib",

  // "typescript.tsserver.log": "verbose",

  // Columns at which to show vertical rulers
  "editor.rulers": [
    80,
    120,
    160
  ],

  // Controls the font family.
  "editor.fontFamily": "Fira Code",

  // Enables font ligatures
  "editor.fontLigatures": true,

  // Controls the font size in pixels.
  "editor.fontSize": 14,

  // The number of spaces a tab is equal to. This setting is overridden based on the file contents when `editor.detectIndentation` is on.
  "editor.tabSize": 2,

  // Controls if suggestions should automatically show up while typing
  "editor.quickSuggestions": {
    "other": true,
    "comments": true,
    "strings": true
  },

  // Controls if the editor should allow to move selections via drag and drop.
  "editor.dragAndDrop": false,

  // Controls if the editor will scroll using an animation
  "editor.smoothScrolling": true,

  // Code action kinds to be run on save.
  "editor.codeActionsOnSave": {
    "source.organizeImports": false
  },

  // Timeout for code actions run on save.
  "editor.codeActionsOnSaveTimeout": 3000,
  
  // Format on save timeout. Specifies a time limit in milliseconds for formatOnSave-commands. Commands taking longer than the specified timeout will be cancelled.
  "editor.formatOnSaveTimeout": 3000,

  
  // Controls whether and how symbols are shown in the breadcrumbs view.
  //  - on: Show all symbols in the breadcrumbs view.
  //  - off: Do not show symbols in the breadcrumbs view.
  //  - last: Only show the current symbol in the breadcrumbs view.
  "breadcrumbs.symbolPath": "off",


  // Controls auto save of dirty files. Accepted values:  'off', 'afterDelay', 'onFocusChange' (editor loses focus), 'onWindowChange' (window loses focus). If set to 'afterDelay', you can configure the delay in 'files.autoSaveDelay'.
  "files.autoSave": "onFocusChange",

  // When enabled, insert a final new line at the end of the file when saving it.
  "files.insertFinalNewline": true,

  // When enabled, will trim all new lines after the final new line at the end of the file when saving it.
  "files.trimFinalNewlines": true,


  // Searches case-insensitively if the pattern is all lowercase, otherwise, searches case-sensitively
  "search.smartCase": true,


  // End with a newline.
  "html.format.endWithNewline": true,


  // Enable/disable semantic checking of JavaScript files. Existing jsconfig.json or tsconfig.json files override this setting. Requires TypeScript >=2.3.1.
  "javascript.implicitProjectConfig.checkJs": true,


  // Enable an explorer view for npm scripts.
  "npm.enableScriptExplorer": false,


  "telemetry.enableCrashReporter": false,
  "telemetry.enableTelemetry": false,


  // When set, text selected in the terminal will be copied to the clipboard.
  "terminal.integrated.copyOnSelection": true,

  // Controls whether the terminal cursor blinks.
  "terminal.integrated.cursorBlinking": true,

  // Controls the style of terminal cursor.
  "terminal.integrated.cursorStyle": "line",

  "terminal.integrated.shell.windows": "C:\\Program Files\\Git\\bin\\bash.exe",

  // The command line arguments to use when on the Windows terminal.
  "terminal.integrated.shellArgs.windows": ["-l"],

  // "terminal.integrated.shell.windows": "cmd.exe",

  // "terminal.integrated.shellArgs.windows": [
  //   "/k", "c:\\cmder-mini\\vscode.bat"
  // ],

  "terminal.integrated.scrollback": 9999,

  // Enables Windows background updates.
  "update.enableWindowsBackgroundUpdates": false,

  // Controls the dimensions of opening a new window when at least one window is already opened. By default, a new window will open in the center of the screen with small dimensions. When set to 'inherit', the window will get the same dimensions as the last window that was active. When set to 'maximized', the window will open maximized and fullscreen if configured to 'fullscreen'. Note that this setting does not have an impact on the first window that is opened. The first window will always restore the size and location as you left it before closing.
  "window.newWindowDimensions": "inherit",

    // Controls the window title based on the active editor. Variables are substituted based on the context:
  // ${activeEditorShort}: the file name (e.g. myFile.txt)
  // ${activeEditorMedium}: the path of the file relative to the workspace folder (e.g. myFolder/myFile.txt)
  // ${activeEditorLong}: the full path of the file (e.g. /Users/Development/myProject/myFolder/myFile.txt)
  // ${folderName}: name of the workspace folder the file is contained in (e.g. myFolder)
  // ${folderPath}: file path of the workspace folder the file is contained in (e.g. /Users/Development/myFolder)
  // ${rootName}: name of the workspace (e.g. myFolder or myWorkspace)
  // ${rootPath}: file path of the workspace (e.g. /Users/Development/myWorkspace)
  // ${appName}: e.g. VS Code
  // ${dirty}: a dirty indicator if the active editor is dirty
  // ${separator}: a conditional separator (" - ") that only shows when surrounded by variables with values
  "window.title": "${dirty}${activeEditorMedium}${separator}${rootName}${separator}${appName}",

  // Controls if opened editors should show in tabs or not.
  "workbench.editor.showTabs": false,

  // Controls which editor is shown at startup, if none is restored from the previous session. Select 'none' to start without an editor, 'welcomePage' to open the Welcome page (default), 'newUntitledFile' to open a new untitled file (only opening an empty workspace).
  "workbench.startupEditor": "none",


  "gitlens.recentChanges.highlight.locations": [
    "overview",
    "line",
    "gutter"
  ],
  "gitlens.currentLine.format": "${id} ${authorAgoOrDate} â€¢ ${message}",
  "gitlens.statusBar.format": "${id} ${authorAgoOrDate}",
  "gitlens.hovers.currentLine.over": "line",
  "gitlens.currentLine.enabled": false,
  "gitlens.codeLens.enabled": false,
  "gitlens.advanced.messages": {
    "suppressCommitHasNoPreviousCommitWarning": false,
    "suppressCommitNotFoundWarning": false,
    "suppressFileNotUnderSourceControlWarning": false,
    "suppressGitVersionWarning": false,
    "suppressLineUncommittedWarning": false,
    "suppressNoRepositoryWarning": false,
    "suppressResultsExplorerNotice": false,
    "suppressShowKeyBindingsNotice": true
  },
  "gitlens.advanced.telemetry.enabled": false,
  "gitlens.views.fileHistory.enabled": true,
  "gitlens.views.lineHistory.enabled": true,

  "sync.gist": "4c333bfdf374e853c8f610e8d9634c19",
  "sync.autoDownload": false,
  "sync.autoUpload": false,
  "sync.quietSync": false,
  "sync.askGistName": false,
  "diffEditor.ignoreTrimWhitespace": true,
  "sync.removeExtensions": true,
  "sync.syncExtensions": true,
  "breadcrumbs.enabled": true,
  "window.menuBarVisibility": "toggle",
  "workbench.editor.enablePreviewFromQuickOpen": false,
  "editor.suggest.localityBonus": true,
  "git.rebaseWhenSync": true,
  "sync.forceDownload": false,
  "cSpell.userWords": [
    "extralight",
    "massoc"
  ],
  "workbench.colorTheme": "Winter is Coming (Dark Blue)",
  "search.usePCRE2": true,
  "search.showLineNumbers": true,
  "workbench.editor.highlightModifiedTabs": true,
  "window.zoomLevel": 0,
  "terminal.integrated.rendererType": "dom",
  "typescript.tsc.autoDetect": "off",
  "jsDocCompletion.enabled": false,
  /*
  // Controls if opened editors from Quick Open show as preview. Preview editors are reused until they are kept (e.g. via double click or editing).
  "workbench.editor.enablePreviewFromQuickOpen": false,

  // Controls if an editor is revealed in any of the visible groups if opened. If disabled, an editor will prefer to open in the currently active editor group. If enabled, an already opened editor will be revealed instead of opened again in the currently active editor group. Note that there are some cases where this setting is ignored, e.g. when forcing an editor to open in a specific group or to the side of the currently active group.
  "workbench.editor.revealIfOpen": true,

  // Controls if Quick Open should close automatically once it loses focus.
  "workbench.quickOpen.closeOnFocusLost": false,

  */
}
